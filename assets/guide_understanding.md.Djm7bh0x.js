import{_ as a,c as i,a2 as t,o as e}from"./chunks/framework.BQmytedh.js";const c=JSON.parse('{"title":"了解 Volta","description":"","frontmatter":{},"headers":[],"relativePath":"guide/understanding.md","filePath":"guide/understanding.md","lastUpdated":1732684903000}'),n={name:"guide/understanding.md"};function l(p,s,h,d,o,k){return e(),i("div",null,s[0]||(s[0]=[t(`<h1 id="了解-volta" tabindex="-1">了解 Volta <a class="header-anchor" href="#了解-volta" aria-label="Permalink to &quot;了解 Volta&quot;">​</a></h1><p>Volta 的工作是管理 JavaScript 命令行工具，如 node、npm、yarn 或作为 JavaScript 包的一部分发布的可执行文件。</p><p>与包管理器类似，Volta 会根据当前目录跟踪您正在处理的项目(如果有的话)。Volta 工具链中的工具会自动检测您所处的项目是否使用特定版本的工具，并为您路由到正确的工具版本。</p><h2 id="管理您的工具链" tabindex="-1">管理您的工具链 <a class="header-anchor" href="#管理您的工具链" aria-label="Permalink to &quot;管理您的工具链&quot;">​</a></h2><p>您可以使用两个命令控制由 Volta 工具链管理的工具: <code>Volta install</code> 和 <code>Volta uninstall</code>。</p><h3 id="安装-node-引擎" tabindex="-1">安装 node 引擎 <a class="header-anchor" href="#安装-node-引擎" aria-label="Permalink to &quot;安装 node 引擎&quot;">​</a></h3><p>要将工具安装到工具链中，需要设置该工具的默认版本。Volta 将始终使用这个默认值，除非您在一个已配置 Volta 使用不同版本的项目目录中工作。当您选择默认版本时，Volta 也会将该版本下载到本地缓存中。</p><p>例如，您可以选择 node 的确切版本作为默认版本:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">volta</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> node@14.15.5</span></span></code></pre></div><p>你不需要指定一个精确的版本，在这种情况下，Volta 会选择一个合适的版本来匹配你的请求:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">volta</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> node@14</span></span></code></pre></div><p>你也可以指定最新版本，或者甚至完全不选择版本，Volta 将选择最新的 LTS 版本:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">volta</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> node</span></span></code></pre></div><p>一旦您运行了这些命令中的一个，在您的 PATH 环境(或 Windows 中的 PATH)中由 Volta 提供的节点可执行文件将在默认情况下自动运行您选择的 node 版本。</p><p>同样地，你可以使用 volta install npm 和 volta install Yarn 分别选择 npm 和 Yarn 包管理器的版本。这些工具将使用您选择的 Node 的默认版本运行。</p><h3 id="installing-package-binaries" tabindex="-1">安装二进制包 <a class="header-anchor" href="#installing-package-binaries" aria-label="Permalink to &quot;安装二进制包{#installing-package-binaries}&quot;">​</a></h3><p>使用 Volta，使用包管理器全局安装命令行工具也会将其添加到工具链中。例如，<a href="https://www.npmjs.com/package/vuepress" target="_blank" rel="noreferrer"><code>vuepress</code></a> 包包含一个同名的可执行文件:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yarn</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> global</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> vuepress</span></span></code></pre></div><p>当您将一个包安装到工具链上时，Volta 会获取当前的默认 Node 版本，并将该工具固定到该引擎上(有关更多信息，请参阅<a href="/reference/advanced/packages.html#pinned-node-version">包二进制文件</a>)。 Volta 不会改变工具的固定引擎，除非你更新工具，无论如何。这样，您就可以确信您安装的工具不会在您背后更改。</p><h2 id="管理您的项目" tabindex="-1">管理您的项目 <a class="header-anchor" href="#管理您的项目" aria-label="Permalink to &quot;管理您的项目&quot;">​</a></h2><p>Volta 允许团队或协作者社区标准化他们在项目中使用的开发工具。</p><h3 id="固定-node-引擎" tabindex="-1">固定 Node 引擎 <a class="header-anchor" href="#固定-node-引擎" aria-label="Permalink to &quot;固定 Node 引擎&quot;">​</a></h3><p>volta pin 命令允许您为项目选择 Node 引擎和包管理器版本:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">volta</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> node@12.20</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">volta</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> yarn@1.19</span></span></code></pre></div><p>Volta 会把这个放在你的 package.json，这样你就可以把你选择的工具提交到版本控制:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;volta&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  &quot;node&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;12.20.2&quot;,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  &quot;yarn&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;1.19.2&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>这样，每个使用 Volta 在项目上工作的人都会自动获得您选择的相同版本。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --version</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 12.20.2</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yarn</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --version</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 1.19.2</span></span></code></pre></div><h3 id="使用项目工具" tabindex="-1">使用项目工具 <a class="header-anchor" href="#使用项目工具" aria-label="Permalink to &quot;使用项目工具&quot;">​</a></h3><p>node 和包管理器可执行文件并不是工具链中唯一的智能工具:工具链中的包二进制文件也知道您的当前目录，并尊重您所在项目的配置。</p><p>例如，安装 Typescript 包会将编译器 <em>tsc</em> 添加到你的工具链中:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --global</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> typescript</span></span></code></pre></div><p>根据你所在的项目，这个可执行文件会切换到项目选择的 TypeScript 版本:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /path/to/project-using-typescript-3.9.4</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tsc</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --version</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 3.9.4</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /path/to/project-using-typescript-4.1.5</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tsc</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --version</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 4.1.5</span></span></code></pre></div><h3 id="安全方便" tabindex="-1">安全方便 <a class="header-anchor" href="#安全方便" aria-label="Permalink to &quot;安全方便&quot;">​</a></h3><p>因为 Volta 的工具链总是跟踪你在哪里，它确保你使用的工具总是尊重你正在做的项目的设置。这意味着您不必担心在项目之间切换时更改已安装软件的状态。</p><p>更重要的是，当 Volta 运行一个工具时，它会覆盖它的轨迹，确保你的 npm 或 Yarn 脚本永远不会看到你的工具链中有什么。</p><p>这两个特性的结合意味着 Volta 解决了<strong>全局包的问题</strong>。换句话说，Volta 为您提供了全局包安装的便利，但没有危险。</p><p>例如，你可以使用 <code>npm i -g typescript</code> 安全地安装 TypeScript，并享受直接调用 tsc 的便利无需担心项目的包脚本可能意外地依赖于您的机器的全局状态。</p>`,39)]))}const g=a(n,[["render",l]]);export{c as __pageData,g as default};
