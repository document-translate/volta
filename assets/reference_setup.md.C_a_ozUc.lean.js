import{_ as i,c as a,a2 as n,o as e}from"./chunks/framework.BQmytedh.js";const F=JSON.parse('{"title":"Volta setups","description":"","frontmatter":{},"headers":[],"relativePath":"reference/setup.md","filePath":"reference/setup.md","lastUpdated":1732684903000}'),t={name:"reference/setup.md"};function l(h,s,p,r,k,o){return e(),a("div",null,s[0]||(s[0]=[n(`<h1 id="volta-setups" tabindex="-1">Volta setups <a class="header-anchor" href="#volta-setups" aria-label="Permalink to &quot;Volta setups&quot;">​</a></h1><p><code>volta setup</code> 命令将通过修改当前用户的 PATH(以与平台相关的方式)来启用 volta，使其包含 volta shim 目录。</p><h2 id="unix" tabindex="-1">Unix <a class="header-anchor" href="#unix" aria-label="Permalink to &quot;Unix&quot;">​</a></h2><p>在 Unix 上，volta 安装程序将使用以下列表搜索配置文件脚本:</p><ul><li>~/.profile</li><li>~/.bash_profile</li><li>~/.bashrc</li><li>~/.zshrc</li><li>~/.config/fish/config.fish</li><li>PROFILE 环境变量的值</li></ul><p>对于存在的每个文件，volta 安装程序将对其进行修改，使其包含定义 VOLTA_HOME 的行，并将$VOLTA_HOME/bin 添加到 PATH 环境变量中。如果当前 shell 的配置文件 (使用 $SHELL 环境变量检测)不存在，那么将使用适当的内容创建它，如果可能的话。</p><h2 id="windows" tabindex="-1">Windows <a class="header-anchor" href="#windows" aria-label="Permalink to &quot;Windows&quot;">​</a></h2><p>在 Windows 上，volta 设置将修改 User Path 环境变量以包含 shim 目录（%LOCALAPPDATA%\\Volta\\bin）.</p><h2 id="语法" tabindex="-1">语法 <a class="header-anchor" href="#语法" aria-label="Permalink to &quot;语法&quot;">​</a></h2><p>命令格式如下:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Enables</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Volta</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> for</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> the</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> current</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> user</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">USAGE:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    volta</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> setup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [FLAGS]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">FLAGS:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        --verbose</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    Enables</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> verbose</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> diagnostics</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        --quiet</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      Prevents</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> unnecessary</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> output</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    -h,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --help</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">       Prints</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> help</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> information</span></span></code></pre></div>`,11)]))}const c=i(t,[["render",l]]);export{F as __pageData,c as default};
